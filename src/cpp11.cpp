// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"

// rib.cpp
cpp11::integers C_max_client_version();
extern "C" SEXP _rib_C_max_client_version() {
  BEGIN_CPP11
    return cpp11::as_sexp(C_max_client_version());
  END_CPP11
}
// rib.cpp
cpp11::list C_decode_bin(int server_version, cpp11::raws bin);
extern "C" SEXP _rib_C_decode_bin(SEXP server_version, SEXP bin) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_decode_bin(cpp11::as_cpp<cpp11::decay_t<int>>(server_version), cpp11::as_cpp<cpp11::decay_t<cpp11::raws>>(bin)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_reqMktData(int twsServerVersion, long reqId, cpp11::list contract, std::string genericTicks, bool snapshot, bool regulatorySnaphsot, cpp11::list mktDataOptions);
extern "C" SEXP _rib_C_enc_reqMktData(SEXP twsServerVersion, SEXP reqId, SEXP contract, SEXP genericTicks, SEXP snapshot, SEXP regulatorySnaphsot, SEXP mktDataOptions) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_reqMktData(cpp11::as_cpp<cpp11::decay_t<int>>(twsServerVersion), cpp11::as_cpp<cpp11::decay_t<long>>(reqId), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(contract), cpp11::as_cpp<cpp11::decay_t<std::string>>(genericTicks), cpp11::as_cpp<cpp11::decay_t<bool>>(snapshot), cpp11::as_cpp<cpp11::decay_t<bool>>(regulatorySnaphsot), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(mktDataOptions)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_cancelMktData(int twsServerVersion, long reqId);
extern "C" SEXP _rib_C_enc_cancelMktData(SEXP twsServerVersion, SEXP reqId) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_cancelMktData(cpp11::as_cpp<cpp11::decay_t<int>>(twsServerVersion), cpp11::as_cpp<cpp11::decay_t<long>>(reqId)));
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_rib_C_decode_bin",         (DL_FUNC) &_rib_C_decode_bin,         2},
    {"_rib_C_enc_cancelMktData",  (DL_FUNC) &_rib_C_enc_cancelMktData,  2},
    {"_rib_C_enc_reqMktData",     (DL_FUNC) &_rib_C_enc_reqMktData,     7},
    {"_rib_C_max_client_version", (DL_FUNC) &_rib_C_max_client_version, 0},
    {NULL, NULL, 0}
};
}

extern "C" void R_init_rib(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
