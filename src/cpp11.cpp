// Generated by cpp11: do not edit by hand
// clang-format off

#include "rib_types.h"
#include "cpp11/declarations.hpp"

// rib.cpp
cpp11::integers C_max_client_version();
extern "C" SEXP _rib_C_max_client_version() {
  BEGIN_CPP11
    return cpp11::as_sexp(C_max_client_version());
  END_CPP11
}
// rib.cpp
cpp11::list C_decode_bin(int serverVersion, cpp11::raws bin);
extern "C" SEXP _rib_C_decode_bin(SEXP serverVersion, SEXP bin) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_decode_bin(cpp11::as_cpp<cpp11::decay_t<int>>(serverVersion), cpp11::as_cpp<cpp11::decay_t<cpp11::raws>>(bin)));
  END_CPP11
}
// rib.cpp
PREncoder C_encoder(int serverVersion);
extern "C" SEXP _rib_C_encoder(SEXP serverVersion) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_encoder(cpp11::as_cpp<cpp11::decay_t<int>>(serverVersion)));
  END_CPP11
}
// rib.cpp
void C_set_serverVersion(PREncoder encoder, int serverVersion);
extern "C" SEXP _rib_C_set_serverVersion(SEXP encoder, SEXP serverVersion) {
  BEGIN_CPP11
    C_set_serverVersion(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<int>>(serverVersion));
    return R_NilValue;
  END_CPP11
}
// rib.cpp
int C_get_serverVersion(PREncoder encoder);
extern "C" SEXP _rib_C_get_serverVersion(SEXP encoder) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_get_serverVersion(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_connectionRequest(PREncoder encoder);
extern "C" SEXP _rib_C_enc_connectionRequest(SEXP encoder) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_connectionRequest(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_startApi(PREncoder encoder, int clientId, const std::string& optionalCapabilities);
extern "C" SEXP _rib_C_enc_startApi(SEXP encoder, SEXP clientId, SEXP optionalCapabilities) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_startApi(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<int>>(clientId), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(optionalCapabilities)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_reqMktData(PREncoder encoder, long reqId, cpp11::list contract, std::string genericTicks, bool snapshot, bool regulatorySnaphsot, cpp11::list mktDataOptions);
extern "C" SEXP _rib_C_enc_reqMktData(SEXP encoder, SEXP reqId, SEXP contract, SEXP genericTicks, SEXP snapshot, SEXP regulatorySnaphsot, SEXP mktDataOptions) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_reqMktData(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<long>>(reqId), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(contract), cpp11::as_cpp<cpp11::decay_t<std::string>>(genericTicks), cpp11::as_cpp<cpp11::decay_t<bool>>(snapshot), cpp11::as_cpp<cpp11::decay_t<bool>>(regulatorySnaphsot), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(mktDataOptions)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_cancelMktData(PREncoder encoder, long reqId);
extern "C" SEXP _rib_C_enc_cancelMktData(SEXP encoder, SEXP reqId) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_cancelMktData(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<long>>(reqId)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_reqMktDepth(PREncoder encoder, long reqId, cpp11::list contract, int numRows, bool isSmartDepth, cpp11::list mktDepthOptions);
extern "C" SEXP _rib_C_enc_reqMktDepth(SEXP encoder, SEXP reqId, SEXP contract, SEXP numRows, SEXP isSmartDepth, SEXP mktDepthOptions) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_reqMktDepth(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<long>>(reqId), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(contract), cpp11::as_cpp<cpp11::decay_t<int>>(numRows), cpp11::as_cpp<cpp11::decay_t<bool>>(isSmartDepth), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(mktDepthOptions)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_cancelMktDepth(PREncoder encoder, long reqId, bool isSmartDepth);
extern "C" SEXP _rib_C_enc_cancelMktDepth(SEXP encoder, SEXP reqId, SEXP isSmartDepth) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_cancelMktDepth(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<long>>(reqId), cpp11::as_cpp<cpp11::decay_t<bool>>(isSmartDepth)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_reqHistoricalData(PREncoder encoder, cpp11::list contract, const std::string& endDateTime, const std::string& durationStr, const std::string& barSizeSetting, const std::string& whatToShow, bool useRTH, bool formatDate, bool keepUpToDate, cpp11::list chartOptions, long reqId);
extern "C" SEXP _rib_C_enc_reqHistoricalData(SEXP encoder, SEXP contract, SEXP endDateTime, SEXP durationStr, SEXP barSizeSetting, SEXP whatToShow, SEXP useRTH, SEXP formatDate, SEXP keepUpToDate, SEXP chartOptions, SEXP reqId) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_reqHistoricalData(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(contract), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(endDateTime), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(durationStr), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(barSizeSetting), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(whatToShow), cpp11::as_cpp<cpp11::decay_t<bool>>(useRTH), cpp11::as_cpp<cpp11::decay_t<bool>>(formatDate), cpp11::as_cpp<cpp11::decay_t<bool>>(keepUpToDate), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(chartOptions), cpp11::as_cpp<cpp11::decay_t<long>>(reqId)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_cancelHistoricalData(PREncoder encoder, long reqId);
extern "C" SEXP _rib_C_enc_cancelHistoricalData(SEXP encoder, SEXP reqId) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_cancelHistoricalData(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<long>>(reqId)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_reqRealTimeBars(PREncoder encoder, long reqId, cpp11::list contract, int barSize, const std::string& whatToShow, bool useRTH, cpp11::list realTimeBarsOptions);
extern "C" SEXP _rib_C_enc_reqRealTimeBars(SEXP encoder, SEXP reqId, SEXP contract, SEXP barSize, SEXP whatToShow, SEXP useRTH, SEXP realTimeBarsOptions) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_reqRealTimeBars(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<long>>(reqId), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(contract), cpp11::as_cpp<cpp11::decay_t<int>>(barSize), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(whatToShow), cpp11::as_cpp<cpp11::decay_t<bool>>(useRTH), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(realTimeBarsOptions)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_cancelRealTimeBars(PREncoder encoder, long reqId);
extern "C" SEXP _rib_C_enc_cancelRealTimeBars(SEXP encoder, SEXP reqId) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_cancelRealTimeBars(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<long>>(reqId)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_reqScannerParameters(PREncoder encoder);
extern "C" SEXP _rib_C_enc_reqScannerParameters(SEXP encoder) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_reqScannerParameters(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_reqScannerSubscription(PREncoder encoder, int reqId, cpp11::list subscription, cpp11::list scannerSubscriptionOptions, cpp11::list scannerSubscriptionFilterOptions);
extern "C" SEXP _rib_C_enc_reqScannerSubscription(SEXP encoder, SEXP reqId, SEXP subscription, SEXP scannerSubscriptionOptions, SEXP scannerSubscriptionFilterOptions) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_reqScannerSubscription(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<int>>(reqId), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(subscription), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(scannerSubscriptionOptions), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(scannerSubscriptionFilterOptions)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_cancelScannerSubscription(PREncoder encoder, int reqId);
extern "C" SEXP _rib_C_enc_cancelScannerSubscription(SEXP encoder, SEXP reqId) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_cancelScannerSubscription(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<int>>(reqId)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_reqFundamentalData(PREncoder encoder, long reqId, cpp11::list contract, const std::string& reportType, cpp11::list fundamentalDataOptions);
extern "C" SEXP _rib_C_enc_reqFundamentalData(SEXP encoder, SEXP reqId, SEXP contract, SEXP reportType, SEXP fundamentalDataOptions) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_reqFundamentalData(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<long>>(reqId), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(contract), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(reportType), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(fundamentalDataOptions)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_cancelFundamentalData(PREncoder encoder, long reqId);
extern "C" SEXP _rib_C_enc_cancelFundamentalData(SEXP encoder, SEXP reqId) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_cancelFundamentalData(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<long>>(reqId)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_calculateImpliedVolatility(PREncoder encoder, long reqId, cpp11::list contract, double optionPrice, double underPrice, cpp11::list  options);
extern "C" SEXP _rib_C_enc_calculateImpliedVolatility(SEXP encoder, SEXP reqId, SEXP contract, SEXP optionPrice, SEXP underPrice, SEXP options) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_calculateImpliedVolatility(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<long>>(reqId), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(contract), cpp11::as_cpp<cpp11::decay_t<double>>(optionPrice), cpp11::as_cpp<cpp11::decay_t<double>>(underPrice), cpp11::as_cpp<cpp11::decay_t<cpp11::list >>(options)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_cancelCalculateImpliedVolatility(PREncoder encoder, long reqId);
extern "C" SEXP _rib_C_enc_cancelCalculateImpliedVolatility(SEXP encoder, SEXP reqId) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_cancelCalculateImpliedVolatility(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<long>>(reqId)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_calculateOptionPrice(PREncoder encoder, long reqId, cpp11::list contract, double volatility, double underPrice, cpp11::list options);
extern "C" SEXP _rib_C_enc_calculateOptionPrice(SEXP encoder, SEXP reqId, SEXP contract, SEXP volatility, SEXP underPrice, SEXP options) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_calculateOptionPrice(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<long>>(reqId), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(contract), cpp11::as_cpp<cpp11::decay_t<double>>(volatility), cpp11::as_cpp<cpp11::decay_t<double>>(underPrice), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(options)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_cancelCalculateOptionPrice(PREncoder encoder, long reqId);
extern "C" SEXP _rib_C_enc_cancelCalculateOptionPrice(SEXP encoder, SEXP reqId) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_cancelCalculateOptionPrice(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<long>>(reqId)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_reqContractDetails(PREncoder encoder, int reqId, cpp11::list contract);
extern "C" SEXP _rib_C_enc_reqContractDetails(SEXP encoder, SEXP reqId, SEXP contract) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_reqContractDetails(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<int>>(reqId), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(contract)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_reqCurrentTime(PREncoder encoder);
extern "C" SEXP _rib_C_enc_reqCurrentTime(SEXP encoder) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_reqCurrentTime(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_placeOrder(PREncoder encoder, OrderId orderId, cpp11::list contract, cpp11::list order);
extern "C" SEXP _rib_C_enc_placeOrder(SEXP encoder, SEXP orderId, SEXP contract, SEXP order) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_placeOrder(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<OrderId>>(orderId), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(contract), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(order)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_cancelOrder(PREncoder encoder, OrderId orderId);
extern "C" SEXP _rib_C_enc_cancelOrder(SEXP encoder, SEXP orderId) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_cancelOrder(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<OrderId>>(orderId)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_reqAccountUpdates(PREncoder encoder, const std::string& accountCode);
extern "C" SEXP _rib_C_enc_reqAccountUpdates(SEXP encoder, SEXP accountCode) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_reqAccountUpdates(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(accountCode)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_cancelAccountUpdates(PREncoder encoder, const std::string& accountCode);
extern "C" SEXP _rib_C_enc_cancelAccountUpdates(SEXP encoder, SEXP accountCode) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_cancelAccountUpdates(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(accountCode)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_reqOpenOrders(PREncoder encoder);
extern "C" SEXP _rib_C_enc_reqOpenOrders(SEXP encoder) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_reqOpenOrders(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_reqAutoOpenOrders(PREncoder encoder, bool autoBind);
extern "C" SEXP _rib_C_enc_reqAutoOpenOrders(SEXP encoder, SEXP autoBind) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_reqAutoOpenOrders(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<bool>>(autoBind)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_reqAllOpenOrders(PREncoder encoder);
extern "C" SEXP _rib_C_enc_reqAllOpenOrders(SEXP encoder) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_reqAllOpenOrders(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_reqExecutions(PREncoder encoder, int reqId, cpp11::list filter);
extern "C" SEXP _rib_C_enc_reqExecutions(SEXP encoder, SEXP reqId, SEXP filter) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_reqExecutions(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<int>>(reqId), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(filter)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_reqIds(PREncoder encoder, int numIds);
extern "C" SEXP _rib_C_enc_reqIds(SEXP encoder, SEXP numIds) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_reqIds(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<int>>(numIds)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_reqNewsBulletins(PREncoder encoder, bool allMsgs);
extern "C" SEXP _rib_C_enc_reqNewsBulletins(SEXP encoder, SEXP allMsgs) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_reqNewsBulletins(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<bool>>(allMsgs)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_cancelNewsBulletins(PREncoder encoder);
extern "C" SEXP _rib_C_enc_cancelNewsBulletins(SEXP encoder) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_cancelNewsBulletins(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_setServerLogLevel(PREncoder encoder, int logLevel);
extern "C" SEXP _rib_C_enc_setServerLogLevel(SEXP encoder, SEXP logLevel) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_setServerLogLevel(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<int>>(logLevel)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_reqManagedAccounts(PREncoder encoder);
extern "C" SEXP _rib_C_enc_reqManagedAccounts(SEXP encoder) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_reqManagedAccounts(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_requestFA(PREncoder encoder, const std::string& faDataType);
extern "C" SEXP _rib_C_enc_requestFA(SEXP encoder, SEXP faDataType) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_requestFA(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(faDataType)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_replaceFA(PREncoder encoder, int reqId, const std::string& faDataType, const std::string& xml);
extern "C" SEXP _rib_C_enc_replaceFA(SEXP encoder, SEXP reqId, SEXP faDataType, SEXP xml) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_replaceFA(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<int>>(reqId), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(faDataType), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(xml)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_exerciseOptions(PREncoder encoder, long reqId, cpp11::list contract, const std::string& exerciseAction, int exerciseQuantity, const std::string& account, int override);
extern "C" SEXP _rib_C_enc_exerciseOptions(SEXP encoder, SEXP reqId, SEXP contract, SEXP exerciseAction, SEXP exerciseQuantity, SEXP account, SEXP override) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_exerciseOptions(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<long>>(reqId), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(contract), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(exerciseAction), cpp11::as_cpp<cpp11::decay_t<int>>(exerciseQuantity), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(account), cpp11::as_cpp<cpp11::decay_t<int>>(override)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_reqGlobalCancel(PREncoder encoder);
extern "C" SEXP _rib_C_enc_reqGlobalCancel(SEXP encoder) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_reqGlobalCancel(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_reqMarketDataType(PREncoder encoder, int marketDataType);
extern "C" SEXP _rib_C_enc_reqMarketDataType(SEXP encoder, SEXP marketDataType) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_reqMarketDataType(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<int>>(marketDataType)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_reqPositions(PREncoder encoder);
extern "C" SEXP _rib_C_enc_reqPositions(SEXP encoder) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_reqPositions(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_cancelPositions(PREncoder encoder);
extern "C" SEXP _rib_C_enc_cancelPositions(SEXP encoder) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_cancelPositions(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_reqAccountSummary(PREncoder encoder, int reqId, const std::string& group, const std::string& tags);
extern "C" SEXP _rib_C_enc_reqAccountSummary(SEXP encoder, SEXP reqId, SEXP group, SEXP tags) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_reqAccountSummary(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<int>>(reqId), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(group), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(tags)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_cancelAccountSummary(PREncoder encoder, int reqId);
extern "C" SEXP _rib_C_enc_cancelAccountSummary(SEXP encoder, SEXP reqId) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_cancelAccountSummary(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<int>>(reqId)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_verifyRequest(PREncoder encoder, const std::string& apiName, const std::string& apiVersion);
extern "C" SEXP _rib_C_enc_verifyRequest(SEXP encoder, SEXP apiName, SEXP apiVersion) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_verifyRequest(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(apiName), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(apiVersion)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_verifyMessage(PREncoder encoder, const std::string& apiData);
extern "C" SEXP _rib_C_enc_verifyMessage(SEXP encoder, SEXP apiData) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_verifyMessage(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(apiData)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_verifyAndAuthRequest(PREncoder encoder, const std::string& apiName, const std::string& apiVersion, const std::string& opaqueIsvKey);
extern "C" SEXP _rib_C_enc_verifyAndAuthRequest(SEXP encoder, SEXP apiName, SEXP apiVersion, SEXP opaqueIsvKey) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_verifyAndAuthRequest(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(apiName), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(apiVersion), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(opaqueIsvKey)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_verifyAndAuthMessage(PREncoder encoder, const std::string& apiData, const std::string& xyzResponse);
extern "C" SEXP _rib_C_enc_verifyAndAuthMessage(SEXP encoder, SEXP apiData, SEXP xyzResponse) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_verifyAndAuthMessage(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(apiData), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(xyzResponse)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_queryDisplayGroups(PREncoder encoder, int reqId);
extern "C" SEXP _rib_C_enc_queryDisplayGroups(SEXP encoder, SEXP reqId) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_queryDisplayGroups(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<int>>(reqId)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_subscribeToGroupEvents(PREncoder encoder, int reqId, int groupId);
extern "C" SEXP _rib_C_enc_subscribeToGroupEvents(SEXP encoder, SEXP reqId, SEXP groupId) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_subscribeToGroupEvents(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<int>>(reqId), cpp11::as_cpp<cpp11::decay_t<int>>(groupId)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_updateDisplayGroup(PREncoder encoder, int reqId, const std::string& contractInfo);
extern "C" SEXP _rib_C_enc_updateDisplayGroup(SEXP encoder, SEXP reqId, SEXP contractInfo) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_updateDisplayGroup(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<int>>(reqId), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(contractInfo)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_unsubscribeFromGroupEvents(PREncoder encoder, int reqId);
extern "C" SEXP _rib_C_enc_unsubscribeFromGroupEvents(SEXP encoder, SEXP reqId) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_unsubscribeFromGroupEvents(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<int>>(reqId)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_reqPositionsMulti(PREncoder encoder, int reqId, const std::string& account, const std::string& modelCode);
extern "C" SEXP _rib_C_enc_reqPositionsMulti(SEXP encoder, SEXP reqId, SEXP account, SEXP modelCode) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_reqPositionsMulti(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<int>>(reqId), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(account), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(modelCode)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_cancelPositionsMulti(PREncoder encoder, int reqId);
extern "C" SEXP _rib_C_enc_cancelPositionsMulti(SEXP encoder, SEXP reqId) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_cancelPositionsMulti(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<int>>(reqId)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_reqAccountUpdatesMulti(PREncoder encoder, int reqId, const std::string& account, const std::string& modelCode, bool ledgerAndNLV);
extern "C" SEXP _rib_C_enc_reqAccountUpdatesMulti(SEXP encoder, SEXP reqId, SEXP account, SEXP modelCode, SEXP ledgerAndNLV) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_reqAccountUpdatesMulti(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<int>>(reqId), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(account), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(modelCode), cpp11::as_cpp<cpp11::decay_t<bool>>(ledgerAndNLV)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_cancelAccountUpdatesMulti(PREncoder encoder, int reqId);
extern "C" SEXP _rib_C_enc_cancelAccountUpdatesMulti(SEXP encoder, SEXP reqId) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_cancelAccountUpdatesMulti(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<int>>(reqId)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_reqSecDefOptParams(PREncoder encoder, int reqId, const std::string& underlyingSymbol, const std::string& futFopExchange, const std::string& underlyingSecType, int underlyingConId);
extern "C" SEXP _rib_C_enc_reqSecDefOptParams(SEXP encoder, SEXP reqId, SEXP underlyingSymbol, SEXP futFopExchange, SEXP underlyingSecType, SEXP underlyingConId) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_reqSecDefOptParams(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<int>>(reqId), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(underlyingSymbol), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(futFopExchange), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(underlyingSecType), cpp11::as_cpp<cpp11::decay_t<int>>(underlyingConId)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_reqSoftDollarTiers(PREncoder encoder, int reqId);
extern "C" SEXP _rib_C_enc_reqSoftDollarTiers(SEXP encoder, SEXP reqId) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_reqSoftDollarTiers(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<int>>(reqId)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_reqFamilyCodes(PREncoder encoder);
extern "C" SEXP _rib_C_enc_reqFamilyCodes(SEXP encoder) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_reqFamilyCodes(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_reqMatchingSymbols(PREncoder encoder, int reqId, const std::string& pattern);
extern "C" SEXP _rib_C_enc_reqMatchingSymbols(SEXP encoder, SEXP reqId, SEXP pattern) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_reqMatchingSymbols(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<int>>(reqId), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(pattern)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_reqMktDepthExchanges(PREncoder encoder);
extern "C" SEXP _rib_C_enc_reqMktDepthExchanges(SEXP encoder) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_reqMktDepthExchanges(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_reqSmartComponents(PREncoder encoder, int reqId, std::string bboExchange);
extern "C" SEXP _rib_C_enc_reqSmartComponents(SEXP encoder, SEXP reqId, SEXP bboExchange) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_reqSmartComponents(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<int>>(reqId), cpp11::as_cpp<cpp11::decay_t<std::string>>(bboExchange)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_reqNewsProviders(PREncoder encoder);
extern "C" SEXP _rib_C_enc_reqNewsProviders(SEXP encoder) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_reqNewsProviders(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_reqNewsArticle(PREncoder encoder, int requestId, const std::string& providerCode, const std::string& articleId, cpp11::list newsArticleOptions);
extern "C" SEXP _rib_C_enc_reqNewsArticle(SEXP encoder, SEXP requestId, SEXP providerCode, SEXP articleId, SEXP newsArticleOptions) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_reqNewsArticle(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<int>>(requestId), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(providerCode), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(articleId), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(newsArticleOptions)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_reqHistoricalNews(PREncoder encoder, int requestId, int conId, const std::string& providerCodes, const std::string& startDateTime, const std::string& endDateTime, int totalResults, cpp11::list historicalNewsOptions);
extern "C" SEXP _rib_C_enc_reqHistoricalNews(SEXP encoder, SEXP requestId, SEXP conId, SEXP providerCodes, SEXP startDateTime, SEXP endDateTime, SEXP totalResults, SEXP historicalNewsOptions) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_reqHistoricalNews(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<int>>(requestId), cpp11::as_cpp<cpp11::decay_t<int>>(conId), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(providerCodes), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(startDateTime), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(endDateTime), cpp11::as_cpp<cpp11::decay_t<int>>(totalResults), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(historicalNewsOptions)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_reqHeadTimestamp(PREncoder encoder, int reqId, cpp11::list contract, const std::string& whatToShow, bool useRTH, int formatDate);
extern "C" SEXP _rib_C_enc_reqHeadTimestamp(SEXP encoder, SEXP reqId, SEXP contract, SEXP whatToShow, SEXP useRTH, SEXP formatDate) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_reqHeadTimestamp(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<int>>(reqId), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(contract), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(whatToShow), cpp11::as_cpp<cpp11::decay_t<bool>>(useRTH), cpp11::as_cpp<cpp11::decay_t<int>>(formatDate)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_cancelHeadTimestamp(PREncoder encoder, int reqId);
extern "C" SEXP _rib_C_enc_cancelHeadTimestamp(SEXP encoder, SEXP reqId) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_cancelHeadTimestamp(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<int>>(reqId)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_reqHistogramData(PREncoder encoder, int reqId, cpp11::list contract, bool useRTH, const std::string& timePeriod);
extern "C" SEXP _rib_C_enc_reqHistogramData(SEXP encoder, SEXP reqId, SEXP contract, SEXP useRTH, SEXP timePeriod) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_reqHistogramData(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<int>>(reqId), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(contract), cpp11::as_cpp<cpp11::decay_t<bool>>(useRTH), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(timePeriod)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_cancelHistogramData(PREncoder encoder, int reqId);
extern "C" SEXP _rib_C_enc_cancelHistogramData(SEXP encoder, SEXP reqId) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_cancelHistogramData(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<int>>(reqId)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_reqMarketRule(PREncoder encoder, int marketRuleId);
extern "C" SEXP _rib_C_enc_reqMarketRule(SEXP encoder, SEXP marketRuleId) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_reqMarketRule(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<int>>(marketRuleId)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_reqPnL(PREncoder encoder, int reqId, const std::string& account, const std::string& modelCode);
extern "C" SEXP _rib_C_enc_reqPnL(SEXP encoder, SEXP reqId, SEXP account, SEXP modelCode) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_reqPnL(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<int>>(reqId), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(account), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(modelCode)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_cancelPnL(PREncoder encoder, int reqId);
extern "C" SEXP _rib_C_enc_cancelPnL(SEXP encoder, SEXP reqId) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_cancelPnL(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<int>>(reqId)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_reqPnLSingle(PREncoder encoder, int reqId, const std::string& account, const std::string& modelCode, int conId);
extern "C" SEXP _rib_C_enc_reqPnLSingle(SEXP encoder, SEXP reqId, SEXP account, SEXP modelCode, SEXP conId) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_reqPnLSingle(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<int>>(reqId), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(account), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(modelCode), cpp11::as_cpp<cpp11::decay_t<int>>(conId)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_cancelPnLSingle(PREncoder encoder, int reqId);
extern "C" SEXP _rib_C_enc_cancelPnLSingle(SEXP encoder, SEXP reqId) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_cancelPnLSingle(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<int>>(reqId)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_reqHistoricalTicks(PREncoder encoder, int reqId, cpp11::list contract, const std::string& startDateTime, const std::string& endDateTime, int numberOfTicks, const std::string& whatToShow, bool useRTH, bool ignoreSize, cpp11::list options);
extern "C" SEXP _rib_C_enc_reqHistoricalTicks(SEXP encoder, SEXP reqId, SEXP contract, SEXP startDateTime, SEXP endDateTime, SEXP numberOfTicks, SEXP whatToShow, SEXP useRTH, SEXP ignoreSize, SEXP options) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_reqHistoricalTicks(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<int>>(reqId), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(contract), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(startDateTime), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(endDateTime), cpp11::as_cpp<cpp11::decay_t<int>>(numberOfTicks), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(whatToShow), cpp11::as_cpp<cpp11::decay_t<bool>>(useRTH), cpp11::as_cpp<cpp11::decay_t<bool>>(ignoreSize), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(options)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_reqTickByTickData(PREncoder encoder, int reqId, cpp11::list contract, const std::string& tickType, int numberOfTicks, bool ignoreSize);
extern "C" SEXP _rib_C_enc_reqTickByTickData(SEXP encoder, SEXP reqId, SEXP contract, SEXP tickType, SEXP numberOfTicks, SEXP ignoreSize) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_reqTickByTickData(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<int>>(reqId), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(contract), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(tickType), cpp11::as_cpp<cpp11::decay_t<int>>(numberOfTicks), cpp11::as_cpp<cpp11::decay_t<bool>>(ignoreSize)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_cancelTickByTickData(PREncoder encoder, int reqId);
extern "C" SEXP _rib_C_enc_cancelTickByTickData(SEXP encoder, SEXP reqId) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_cancelTickByTickData(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<int>>(reqId)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_reqCompletedOrders(PREncoder encoder, bool apiOnly);
extern "C" SEXP _rib_C_enc_reqCompletedOrders(SEXP encoder, SEXP apiOnly) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_reqCompletedOrders(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<bool>>(apiOnly)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_reqWshMetaData(PREncoder encoder, int reqId);
extern "C" SEXP _rib_C_enc_reqWshMetaData(SEXP encoder, SEXP reqId) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_reqWshMetaData(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<int>>(reqId)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_reqWshEventData(PREncoder encoder, int reqId, int conId);
extern "C" SEXP _rib_C_enc_reqWshEventData(SEXP encoder, SEXP reqId, SEXP conId) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_reqWshEventData(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<int>>(reqId), cpp11::as_cpp<cpp11::decay_t<int>>(conId)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_cancelWshMetaData(PREncoder encoder, int reqId);
extern "C" SEXP _rib_C_enc_cancelWshMetaData(SEXP encoder, SEXP reqId) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_cancelWshMetaData(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<int>>(reqId)));
  END_CPP11
}
// rib.cpp
cpp11::raws C_enc_cancelWshEventData(PREncoder encoder, int reqId);
extern "C" SEXP _rib_C_enc_cancelWshEventData(SEXP encoder, SEXP reqId) {
  BEGIN_CPP11
    return cpp11::as_sexp(C_enc_cancelWshEventData(cpp11::as_cpp<cpp11::decay_t<PREncoder>>(encoder), cpp11::as_cpp<cpp11::decay_t<int>>(reqId)));
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_rib_C_decode_bin",                           (DL_FUNC) &_rib_C_decode_bin,                            2},
    {"_rib_C_enc_calculateImpliedVolatility",       (DL_FUNC) &_rib_C_enc_calculateImpliedVolatility,        6},
    {"_rib_C_enc_calculateOptionPrice",             (DL_FUNC) &_rib_C_enc_calculateOptionPrice,              6},
    {"_rib_C_enc_cancelAccountSummary",             (DL_FUNC) &_rib_C_enc_cancelAccountSummary,              2},
    {"_rib_C_enc_cancelAccountUpdates",             (DL_FUNC) &_rib_C_enc_cancelAccountUpdates,              2},
    {"_rib_C_enc_cancelAccountUpdatesMulti",        (DL_FUNC) &_rib_C_enc_cancelAccountUpdatesMulti,         2},
    {"_rib_C_enc_cancelCalculateImpliedVolatility", (DL_FUNC) &_rib_C_enc_cancelCalculateImpliedVolatility,  2},
    {"_rib_C_enc_cancelCalculateOptionPrice",       (DL_FUNC) &_rib_C_enc_cancelCalculateOptionPrice,        2},
    {"_rib_C_enc_cancelFundamentalData",            (DL_FUNC) &_rib_C_enc_cancelFundamentalData,             2},
    {"_rib_C_enc_cancelHeadTimestamp",              (DL_FUNC) &_rib_C_enc_cancelHeadTimestamp,               2},
    {"_rib_C_enc_cancelHistogramData",              (DL_FUNC) &_rib_C_enc_cancelHistogramData,               2},
    {"_rib_C_enc_cancelHistoricalData",             (DL_FUNC) &_rib_C_enc_cancelHistoricalData,              2},
    {"_rib_C_enc_cancelMktData",                    (DL_FUNC) &_rib_C_enc_cancelMktData,                     2},
    {"_rib_C_enc_cancelMktDepth",                   (DL_FUNC) &_rib_C_enc_cancelMktDepth,                    3},
    {"_rib_C_enc_cancelNewsBulletins",              (DL_FUNC) &_rib_C_enc_cancelNewsBulletins,               1},
    {"_rib_C_enc_cancelOrder",                      (DL_FUNC) &_rib_C_enc_cancelOrder,                       2},
    {"_rib_C_enc_cancelPnL",                        (DL_FUNC) &_rib_C_enc_cancelPnL,                         2},
    {"_rib_C_enc_cancelPnLSingle",                  (DL_FUNC) &_rib_C_enc_cancelPnLSingle,                   2},
    {"_rib_C_enc_cancelPositions",                  (DL_FUNC) &_rib_C_enc_cancelPositions,                   1},
    {"_rib_C_enc_cancelPositionsMulti",             (DL_FUNC) &_rib_C_enc_cancelPositionsMulti,              2},
    {"_rib_C_enc_cancelRealTimeBars",               (DL_FUNC) &_rib_C_enc_cancelRealTimeBars,                2},
    {"_rib_C_enc_cancelScannerSubscription",        (DL_FUNC) &_rib_C_enc_cancelScannerSubscription,         2},
    {"_rib_C_enc_cancelTickByTickData",             (DL_FUNC) &_rib_C_enc_cancelTickByTickData,              2},
    {"_rib_C_enc_cancelWshEventData",               (DL_FUNC) &_rib_C_enc_cancelWshEventData,                2},
    {"_rib_C_enc_cancelWshMetaData",                (DL_FUNC) &_rib_C_enc_cancelWshMetaData,                 2},
    {"_rib_C_enc_connectionRequest",                (DL_FUNC) &_rib_C_enc_connectionRequest,                 1},
    {"_rib_C_enc_exerciseOptions",                  (DL_FUNC) &_rib_C_enc_exerciseOptions,                   7},
    {"_rib_C_enc_placeOrder",                       (DL_FUNC) &_rib_C_enc_placeOrder,                        4},
    {"_rib_C_enc_queryDisplayGroups",               (DL_FUNC) &_rib_C_enc_queryDisplayGroups,                2},
    {"_rib_C_enc_replaceFA",                        (DL_FUNC) &_rib_C_enc_replaceFA,                         4},
    {"_rib_C_enc_reqAccountSummary",                (DL_FUNC) &_rib_C_enc_reqAccountSummary,                 4},
    {"_rib_C_enc_reqAccountUpdates",                (DL_FUNC) &_rib_C_enc_reqAccountUpdates,                 2},
    {"_rib_C_enc_reqAccountUpdatesMulti",           (DL_FUNC) &_rib_C_enc_reqAccountUpdatesMulti,            5},
    {"_rib_C_enc_reqAllOpenOrders",                 (DL_FUNC) &_rib_C_enc_reqAllOpenOrders,                  1},
    {"_rib_C_enc_reqAutoOpenOrders",                (DL_FUNC) &_rib_C_enc_reqAutoOpenOrders,                 2},
    {"_rib_C_enc_reqCompletedOrders",               (DL_FUNC) &_rib_C_enc_reqCompletedOrders,                2},
    {"_rib_C_enc_reqContractDetails",               (DL_FUNC) &_rib_C_enc_reqContractDetails,                3},
    {"_rib_C_enc_reqCurrentTime",                   (DL_FUNC) &_rib_C_enc_reqCurrentTime,                    1},
    {"_rib_C_enc_reqExecutions",                    (DL_FUNC) &_rib_C_enc_reqExecutions,                     3},
    {"_rib_C_enc_reqFamilyCodes",                   (DL_FUNC) &_rib_C_enc_reqFamilyCodes,                    1},
    {"_rib_C_enc_reqFundamentalData",               (DL_FUNC) &_rib_C_enc_reqFundamentalData,                5},
    {"_rib_C_enc_reqGlobalCancel",                  (DL_FUNC) &_rib_C_enc_reqGlobalCancel,                   1},
    {"_rib_C_enc_reqHeadTimestamp",                 (DL_FUNC) &_rib_C_enc_reqHeadTimestamp,                  6},
    {"_rib_C_enc_reqHistogramData",                 (DL_FUNC) &_rib_C_enc_reqHistogramData,                  5},
    {"_rib_C_enc_reqHistoricalData",                (DL_FUNC) &_rib_C_enc_reqHistoricalData,                11},
    {"_rib_C_enc_reqHistoricalNews",                (DL_FUNC) &_rib_C_enc_reqHistoricalNews,                 8},
    {"_rib_C_enc_reqHistoricalTicks",               (DL_FUNC) &_rib_C_enc_reqHistoricalTicks,               10},
    {"_rib_C_enc_reqIds",                           (DL_FUNC) &_rib_C_enc_reqIds,                            2},
    {"_rib_C_enc_reqManagedAccounts",               (DL_FUNC) &_rib_C_enc_reqManagedAccounts,                1},
    {"_rib_C_enc_reqMarketDataType",                (DL_FUNC) &_rib_C_enc_reqMarketDataType,                 2},
    {"_rib_C_enc_reqMarketRule",                    (DL_FUNC) &_rib_C_enc_reqMarketRule,                     2},
    {"_rib_C_enc_reqMatchingSymbols",               (DL_FUNC) &_rib_C_enc_reqMatchingSymbols,                3},
    {"_rib_C_enc_reqMktData",                       (DL_FUNC) &_rib_C_enc_reqMktData,                        7},
    {"_rib_C_enc_reqMktDepth",                      (DL_FUNC) &_rib_C_enc_reqMktDepth,                       6},
    {"_rib_C_enc_reqMktDepthExchanges",             (DL_FUNC) &_rib_C_enc_reqMktDepthExchanges,              1},
    {"_rib_C_enc_reqNewsArticle",                   (DL_FUNC) &_rib_C_enc_reqNewsArticle,                    5},
    {"_rib_C_enc_reqNewsBulletins",                 (DL_FUNC) &_rib_C_enc_reqNewsBulletins,                  2},
    {"_rib_C_enc_reqNewsProviders",                 (DL_FUNC) &_rib_C_enc_reqNewsProviders,                  1},
    {"_rib_C_enc_reqOpenOrders",                    (DL_FUNC) &_rib_C_enc_reqOpenOrders,                     1},
    {"_rib_C_enc_reqPnL",                           (DL_FUNC) &_rib_C_enc_reqPnL,                            4},
    {"_rib_C_enc_reqPnLSingle",                     (DL_FUNC) &_rib_C_enc_reqPnLSingle,                      5},
    {"_rib_C_enc_reqPositions",                     (DL_FUNC) &_rib_C_enc_reqPositions,                      1},
    {"_rib_C_enc_reqPositionsMulti",                (DL_FUNC) &_rib_C_enc_reqPositionsMulti,                 4},
    {"_rib_C_enc_reqRealTimeBars",                  (DL_FUNC) &_rib_C_enc_reqRealTimeBars,                   7},
    {"_rib_C_enc_reqScannerParameters",             (DL_FUNC) &_rib_C_enc_reqScannerParameters,              1},
    {"_rib_C_enc_reqScannerSubscription",           (DL_FUNC) &_rib_C_enc_reqScannerSubscription,            5},
    {"_rib_C_enc_reqSecDefOptParams",               (DL_FUNC) &_rib_C_enc_reqSecDefOptParams,                6},
    {"_rib_C_enc_reqSmartComponents",               (DL_FUNC) &_rib_C_enc_reqSmartComponents,                3},
    {"_rib_C_enc_reqSoftDollarTiers",               (DL_FUNC) &_rib_C_enc_reqSoftDollarTiers,                2},
    {"_rib_C_enc_reqTickByTickData",                (DL_FUNC) &_rib_C_enc_reqTickByTickData,                 6},
    {"_rib_C_enc_reqWshEventData",                  (DL_FUNC) &_rib_C_enc_reqWshEventData,                   3},
    {"_rib_C_enc_reqWshMetaData",                   (DL_FUNC) &_rib_C_enc_reqWshMetaData,                    2},
    {"_rib_C_enc_requestFA",                        (DL_FUNC) &_rib_C_enc_requestFA,                         2},
    {"_rib_C_enc_setServerLogLevel",                (DL_FUNC) &_rib_C_enc_setServerLogLevel,                 2},
    {"_rib_C_enc_startApi",                         (DL_FUNC) &_rib_C_enc_startApi,                          3},
    {"_rib_C_enc_subscribeToGroupEvents",           (DL_FUNC) &_rib_C_enc_subscribeToGroupEvents,            3},
    {"_rib_C_enc_unsubscribeFromGroupEvents",       (DL_FUNC) &_rib_C_enc_unsubscribeFromGroupEvents,        2},
    {"_rib_C_enc_updateDisplayGroup",               (DL_FUNC) &_rib_C_enc_updateDisplayGroup,                3},
    {"_rib_C_enc_verifyAndAuthMessage",             (DL_FUNC) &_rib_C_enc_verifyAndAuthMessage,              3},
    {"_rib_C_enc_verifyAndAuthRequest",             (DL_FUNC) &_rib_C_enc_verifyAndAuthRequest,              4},
    {"_rib_C_enc_verifyMessage",                    (DL_FUNC) &_rib_C_enc_verifyMessage,                     2},
    {"_rib_C_enc_verifyRequest",                    (DL_FUNC) &_rib_C_enc_verifyRequest,                     3},
    {"_rib_C_encoder",                              (DL_FUNC) &_rib_C_encoder,                               1},
    {"_rib_C_get_serverVersion",                    (DL_FUNC) &_rib_C_get_serverVersion,                     1},
    {"_rib_C_max_client_version",                   (DL_FUNC) &_rib_C_max_client_version,                    0},
    {"_rib_C_set_serverVersion",                    (DL_FUNC) &_rib_C_set_serverVersion,                     2},
    {NULL, NULL, 0}
};
}

extern "C" void R_init_rib(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
