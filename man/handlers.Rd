% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/handlers.R
\name{handlers}
\alias{handlers}
\alias{bld_recorder}
\alias{hlr_record_stdout_str}
\alias{hlr_record_stdout_val}
\alias{hlr_decode_str}
\alias{bld_save_history}
\alias{hlr_track_requests}
\alias{hlr_process_callbacks}
\title{IB Handlers}
\usage{
bld_recorder(
  file = stdout(),
  type = c("val", "str"),
  exclude = NULL,
  include = NULL,
  ts_format = TS_FORMAT
)

hlr_record_stdout_str(self, msg)

hlr_record_stdout_val(self, msg)

hlr_decode_str(self, msg)

bld_save_history(
  path = "history",
  contract_fields = "localSymbol",
  req_fields = c("barSize", "whatToShow"),
  partition = c("none", "fields", "hive"),
  format = c("rds", "parquet"),
  binder = c("auto", "data.table", "dplyr"),
  verbose = TRUE,
  ...
)

hlr_track_requests(self, msg)

hlr_process_callbacks(self, msg)
}
\arguments{
\item{file}{Where to record messages. Default to \code{\link[=stdout]{stdout()}}}

\item{type}{Type of the recording, either the \code{val} slot of the message or \code{str} - string representation of the message.}

\item{exclude}{Regular expression matching events that should not be recorded. NULL means no events are excluded.}

\item{include}{Regular expression matching events that should be recorded. NULL means all events.}

\item{ts_format}{format for timestamps}

\item{self}{\code{TWS} R client object created with \code{\link[=tws]{tws()}} constructor.}

\item{msg}{a list containing values added by the preceding handlers. The
initial message contains the following element
\describe{
\item{bin}{raw object containing the binary representation of the TWS message}
\item{ts}{timestamp when the message was received by TWS R client}
}}
}
\description{
When the \code{TWS} R client receives a message from the \code{TWS} server, each
messaged is processed in turn by the pipeline handlers (\code{inHandlers} and
\code{outHandlers} argument of \code{\link[=tws]{tws()}} constructor). Handlers are functions that
take two arguments - \code{tws} client object and a message (a list). A handler
should modify and return the message. If a handler returns NULL, the message
will not be passed to the remaining handlers.
}
